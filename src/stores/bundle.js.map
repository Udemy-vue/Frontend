{"version":3,"names":[],"mappings":"","sources":["bundle.js"],"sourcesContent":["import axios from 'axios';\nimport { defineStore } from \"pinia\";\nimport { api, nano, links } from \"boot/axios\";\nimport {ref} from \"vue\";\nimport Router from \"src/router\";\nimport {useRouter} from \"vue-router\";\nimport {Notify, useQuasar} from \"quasar\";\n// import { auth, db, storage } from \"../../firebaseConfig\";\n// import { createUserWithEmailAndPassword,\n// \t\tsignInWithEmailAndPassword,\n// \t\tonAuthStateChanged,\n// \t\tsignOut, updateProfile} from \"firebase/auth\";\n// import { collection, query, where, getDoc,\n// \t\tgetDocs, addDoc, deleteDoc, doc,\n// \t\tupdateDoc, setDoc } from 'firebase/firestore';\n// import { getDownloadURL, uploadBytes, ref } from 'firebase/storage'\n// import router from '../router';\n// import { nanoid } from 'nanoid';\n// import { errorAutentication } from \"../../src/Constans\";\n// import { message } from \"ant-design-vue\";\n\nconst privateUser = defineStore('private', {\n  state: () => ({\n    $q: useQuasar()\n  }),\n  actions: {\n\n    // Función privada para manejar errores\n    _handleError(e) {\n      let message = '';\n      if (!e.response) {\n        if (e.request) {\n          message = e.request;\n        } else {\n          message = e.message;\n        }\n      } else {\n        message = e.response.data.error;\n        console.log(e.response.status);\n      }\n      console.log(e.config);\n      this._showNotif('top',\n        {message, type: 'warning'});\n    },\n\n    _setSessionToken(token, expiresIn) {\n      this.token = token;\n      this.expiresIn = expiresIn;\n      this.counter = ref(true);\n      sessionStorage.setItem('user', 'true');\n      this.router.push('/');\n    },\n\n    _showNotif(position, alerts) {\n      const {textColor, multiLine, icon, message, avatar, type} = alerts;\n      this.$q.notify({\n        type,\n        timeout: 1500,\n        progress: true,\n        icon,\n        textColor,\n        message,\n        position,\n        avatar,\n        multiLine\n      });\n    }\n  }\n});\n\nexport const ButtonUser = defineStore('button', {\n  state: () => ({\n    button: ref('Registrar'),\n    counter: ref(false),\n    token: ref(''),\n    expiresIn: ref(0),\n    // longLink: ref(''),\n    email: ref('penelope@test.com'),\n    password: ref('123123'),\n    Rpassword: ref('123123'),\n    router: useRouter(),\n  }),\n\n  actions: {\n    // Función privada para establecer el token de sesión\n    async access() {\n      try {\n        const res = await api.post('login', {\n          \"email\": this.email,\n          \"password\": this.password\n        });\n        privateUser()._setSessionToken(res.data.token, res.data.expiresIn);\n        this._setTime();\n        this.resetUser();\n        privateUser()._showNotif(\n          'top',\n          {message: 'Usuario Valido', type: 'positive', icon: 'login'});\n      } catch (e) {\n        privateUser()._handleError(e);\n      }\n    },\n\n    async registerUser() {\n      try {\n        const res = await api.post('register', {\n          \"email\": this.email,\n          \"password\": this.password,\n          \"repassword\": this.Rpassword\n        });\n        privateUser()._setSessionToken(res.data.token, res.data.expiresIn);\n        this._setTime();\n        this.resetUser();\n        privateUser()._showNotif(\n          'top',\n          {message: 'Usuario Registrado', type: 'positive', icon: 'how_to_reg'});\n      } catch (e) {\n        privateUser()._handleError(e);\n      }\n    },\n\n    resetUser() {\n      this.email = ref('');\n      this.password = ref('');\n      this.Rpassword = ref('');\n    },\n\n    async refreshToken() {\n      try {\n        // console.log('refresh');\n        const res = await api.get('refresh');\n        this.token = res.data.token;\n        this.counter = ref(true);\n        this.expiresIn = res.data.expiresIn;\n        this._setTime();\n      } catch (e) {\n        console.log(e);\n        sessionStorage.removeItem('user')\n      }\n    },\n\n    _setTime() {\n      setTimeout(() => {\n        this.refreshToken();\n      }, this.expiresIn * 1000 - 6000)\n    },\n\n    async logout() {\n      try {\n        await api.get(\"logout\");\n        this.router.push('/login');\n      } catch (e) {\n        console.log(e);\n      } finally {\n        this.resetStore();\n        this.counter = ref(false);\n        sessionStorage.removeItem('user')\n      }\n    },\n\n    resetStore() {\n      this.token = null;\n      this.expiresIn = null;\n    }\n  }\n});\n\nexport const useUrlStore = defineStore('url',  {\n  state: () => ({\n    longLink: ref(''),\n    links: ref([]),\n    current: ref(1),\n    size: ref(1),\n    $q: useQuasar()\n  }),\n  actions: {\n    async createLink() {\n      // console.log(this.longLink)\n      try {\n        const res = await links({\n          method: \"POST\",\n          url: \"ok\",\n          headers: {\n            Authorization: \"Bearer \" + ButtonUser().token,\n          },\n          data: {\n            longLink: this.longLink\n          }\n        });\n        // console.log(res.data);\n        this.links.push(res.data.newLink);\n        privateUser()._showNotif(\n          'top',\n          {message: 'Link Registrado', type: 'info', icon: 'add_circle'});\n        this.resetUser();\n      } catch (e) {\n        console.log(e.response.data || e);\n      }\n    },\n\n    async loadLink() {\n      try {\n        const res = await links({\n          url: 'ok',\n          method: 'GET',\n          headers: {\n            Authorization: 'Bearer ' + ButtonUser().token\n          }\n        });\n        // console.log(res.data);\n        this.links = res.data.links.map((item) => {\n          return {\n            longLink: item.longLink,\n            nanoLink: item.nanoLink,\n            uid: item.uid,\n            _id: item._id\n          }\n        });\n        // console.log(this.links);\n      } catch (e) {\n        console.log(e);\n      }\n    },\n\n    onPageChange() {\n      console.log(this.current);\n    },\n\n    async Delete(link, item) {\n      try {\n        this.$q.dialog({\n          title: 'Eliminar',\n          message: 'Desea eliminar este dato!',\n          cancel: true,\n          persistent: true\n        }).onOk(async () => {\n          // console.log('>>>> OK')\n          await links({\n            url: `ok/${link._id}`,\n            method: 'DELETE',\n            headers: {\n              Authorization: 'Bearer ' + ButtonUser().token\n            }\n          });\n          this.links.splice(item, 1);\n          privateUser()._showNotif(\n            'top',\n            {message: 'Link Eliminado', type: 'negative', icon: 'delete'});\n        })\n\n      } catch (e) {\n        console.log(e);\n      }\n    },\n\n    async EditLink(link, item) {\n      try {\n        this.$q.dialog({\n          title: 'Editar',\n          message: 'Actualiza el link registrado',\n          prompt: {\n            model: link.longLink,\n            isValid: val => val.length > 2, // << here is the magic\n            type: 'text' // optional\n          },\n          cancel: true,\n          persistent: true\n        }).onOk(async data => {\n          await links({\n            url: `ok/${link._id}`,\n            method: 'PATCH',\n            headers: {\n              Authorization: 'Bearer ' + ButtonUser().token\n            },\n            data: { longLink: data }\n          });\n          this.links[item].longLink = data;\n          privateUser()._showNotif(\n            'top',\n            {message: 'Link Editado', type: 'info', icon: 'edit_document'});\n        })\n      } catch (e) {\n        console.log(e)\n      }\n    },\n\n    async OpenLink(link) {\n      try {\n        const res = await links({\n          url: link.nanoLink,\n          method: 'GET',\n          headers: {\n            Authorization: 'Bearer ' + ButtonUser().token\n          }\n        });\n        // console.log(res.data);\n        window.open(res.data.longLink, '_blank');\n        // console.log(this.links);\n      } catch (e) {\n        console.log(e);\n      }\n    },\n\n    logout() {\n      this.longLink = ref('');\n      this.links = ref([]);\n      this.current = ref(1);\n      this.size = ref(1);\n    },\n\n    resetUser() {\n      this.longLink = ref('');\n    }\n  }\n})\n"],"file":"bundle.js"}